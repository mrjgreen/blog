<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Building A Blog on Joe Green</title>
    <link>http://joeg.uk/series/building-a-blog/index.xml</link>
    <description>Recent content in Building A Blog on Joe Green</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright> </copyright>
    <atom:link href="http://joeg.uk/series/building-a-blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building a Blog - Part 2</title>
      <link>http://joeg.uk/2016/12/building-a-blog---part-2/</link>
      <pubDate>Fri, 23 Dec 2016 00:02:31 +0000</pubDate>
      
      <guid>http://joeg.uk/2016/12/building-a-blog---part-2/</guid>
      <description>

&lt;p&gt;Last time, we discussed setting up a blog using &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, a static site generator.&lt;/p&gt;

&lt;p&gt;Today, I&amp;rsquo;m going to add to the project with some terraform configuration and a simple
build and deploy process.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR - I added terraform files in the &amp;ldquo;resources&amp;rdquo; folder to create an S3 bucket
and a Makefile with a few canned commands for deploying.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you don&amp;rsquo;t already have them, you&amp;rsquo;ll need the following tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;awscli (&lt;code&gt;brew install awscli&lt;/code&gt; or &lt;code&gt;pip install awscli&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;terraform (&lt;code&gt;brew install terraform&lt;/code&gt; or &lt;a href=&#34;https://www.terraform.io/downloads.html&#34;&gt;download for your platform&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;rsquo;ll need to configure your credentials for the awscli by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws configure
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-the-s3-bucket&#34;&gt;Creating the S3 Bucket&lt;/h2&gt;

&lt;p&gt;We could very quickly jump onto our AWS console and create an S3 bucket. A few clicks in the
interface and in seconds we could be up and running.&lt;/p&gt;

&lt;p&gt;Well, that&amp;rsquo;s fine for now, but what if we want to add cloudfront capabilities? Or some DNS
records to route 53? Even with a simple static website, its easy to see how our infrastructure
could expand.&lt;/p&gt;

&lt;p&gt;Using terraform we can store a representation of our infrastructure in code, which will be
used to drive the API commands to build your stack.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by creating a folder to hold our terraform files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir resources/terraform
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create a file &lt;code&gt;resources/terraform/s3.tf&lt;/code&gt; to hold our S3 Bucket configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resource &amp;quot;aws_s3_bucket&amp;quot; &amp;quot;blog&amp;quot; {
  bucket = &amp;quot;joeg.uk&amp;quot;
  acl = &amp;quot;public-read&amp;quot; # Needs to be public for a website

  versioning {
    enabled = true
  }
  
  website {
      index_document = &amp;quot;index.html&amp;quot;
      error_document = &amp;quot;404.html&amp;quot;
  }

  tags {
    Application = &amp;quot;Blog&amp;quot;
    Owner = &amp;quot;Joe Green&amp;quot;
    Provisioner = &amp;quot;Terraform&amp;quot;
    ProvisionerSrc = &amp;quot;github.com/mrjgreen/blog&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; It&amp;rsquo;s important to tag all your resources appropriately to help with identification
and cost breakdowns (E.G. see how much each &amp;ldquo;Application&amp;rdquo; is costing to run).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;applying-your-infrastructure&#34;&gt;Applying your Infrastructure&lt;/h3&gt;

&lt;p&gt;You should now be able to navigate to your terraform directory and run a &amp;ldquo;plan&amp;rdquo;.
A plan is a dry run, and will NOT make any changes to your infrastructure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd resources/terraform
terraform plan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any resource created for AWS will use the terraform AWS provider, which requires a
default region setting. By default, terraform will ask you to provide this on
the terminal whenever you run a command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ terraform plan
provider.aws.region
  The region where AWS operations will take place. Examples
  are us-east-1, us-west-2, etc.

  Default: us-east-1
  Enter a value: eu-west-1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to avoid typing this each time and to ensure all our configuration is held
in our terraform files, we can create a new file &lt;code&gt;resources/terraform/aws.tf&lt;/code&gt; containing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;provider &amp;quot;aws&amp;quot; {
  region = &amp;quot;eu-west-1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run &lt;code&gt;terraform plan&lt;/code&gt; we will not be prompted for a value, and we should see
our new infrastructure component ready to create.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ terraform plan
Refreshing Terraform state in-memory prior to plan...

// snip...

+ aws_s3_bucket.blog
    acceleration_status:      &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    acl:                      &amp;quot;public-read&amp;quot;
    arn:                      &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    bucket:                   &amp;quot;joeg.uk&amp;quot;
    force_destroy:            &amp;quot;false&amp;quot;
    hosted_zone_id:           &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    region:                   &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    request_payer:            &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    tags.%:                   &amp;quot;4&amp;quot;
    tags.Application:         &amp;quot;Blog&amp;quot;
    tags.Owner:               &amp;quot;Joe Green&amp;quot;
    tags.Provisioner:         &amp;quot;Terraform&amp;quot;
    tags.ProvisionerSrc:      &amp;quot;github.com/mrjgreen/blog&amp;quot;
    versioning.#:             &amp;quot;1&amp;quot;
    versioning.0.enabled:     &amp;quot;true&amp;quot;
    versioning.0.mfa_delete:  &amp;quot;false&amp;quot;
    website.#:                &amp;quot;1&amp;quot;
    website.0.error_document: &amp;quot;404.html&amp;quot;
    website.0.index_document: &amp;quot;index.html&amp;quot;
    website_domain:           &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    website_endpoint:         &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;


Plan: 1 to add, 0 to change, 0 to destroy.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets go ahead and apply that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see pretty much the same output as before, but with the last line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deploying-the-blog&#34;&gt;Deploying the Blog&lt;/h2&gt;

&lt;p&gt;Running &lt;code&gt;hugo&lt;/code&gt; will generate your static site in a folder called &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Deploying should be as easy as copying the contents of &lt;code&gt;public&lt;/code&gt; up to the S3 bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws s3 sync public s3://joeg.uk --delete --acl public-read
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can store this in a &lt;code&gt;Makefile&lt;/code&gt; in the project root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;all:

build:
	rm -fr public/*
	hugo

deploy:
	aws s3 sync public s3://joeg.uk --delete --acl public-read
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will allow us to run simple commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make deploy
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Building a Blog - Part 1</title>
      <link>http://joeg.uk/2016/12/building-a-blog---part-1/</link>
      <pubDate>Tue, 20 Dec 2016 21:02:31 +0000</pubDate>
      
      <guid>http://joeg.uk/2016/12/building-a-blog---part-1/</guid>
      <description>

&lt;p&gt;I recently started a new job working remotely, freeing up the hour or so I&amp;rsquo;d usually
spend commuting each day. My intention is to use this time to start a blog.&lt;/p&gt;

&lt;p&gt;For now, the content can wait - first item on the list: &lt;strong&gt;choose a blogging platform&lt;/strong&gt; :)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR - I settled on &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, a static site generator which
allows me to keep the site in version control on github, and deploy to an S3 bucket
managed via terraform.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;Before I started looking at solutions, I wanted to write down some simple requirements
so I&amp;rsquo;d know when I found the right one.&lt;/p&gt;

&lt;h4 id=&#34;easy-setup&#34;&gt;Easy Setup&lt;/h4&gt;

&lt;p&gt;I wanted to get writing straight away. I didn&amp;rsquo;t want to have to wade through pages of documentation,
or spend 4 hours working out which database fixtures to apply.&lt;/p&gt;

&lt;h4 id=&#34;low-maintenance&#34;&gt;Low maintenance&lt;/h4&gt;

&lt;p&gt;I spend my working days designing and building robust, HA platforms with complex deployment
pipelines, detailed monitoring/alerting systems and comprehensive back-up routines.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want this blog to be another maintenance task to add to my list.&lt;/p&gt;

&lt;h4 id=&#34;version-controlled&#34;&gt;Version Controlled&lt;/h4&gt;

&lt;p&gt;Everything should be in version control; not just the code, but the infrastructure and content too.&lt;/p&gt;

&lt;h4 id=&#34;markdown-support&#34;&gt;Markdown Support&lt;/h4&gt;

&lt;p&gt;I&amp;rsquo;d like to be able to write using markdown, for a few reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;it fast and flexible&lt;/li&gt;
&lt;li&gt;allows me to work offline&lt;/li&gt;
&lt;li&gt;content is portable&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;robust-scalable-and-performant&#34;&gt;Robust, Scalable and &amp;ldquo;Performant&amp;rdquo;&lt;/h4&gt;

&lt;p&gt;While it&amp;rsquo;s unlikely that this blog is going to see any real volume of traffic, it is going to be
a public representation of my work and I&amp;rsquo;d like it to have solid up-time, with low cost.
This means it has to run efficiently on a platform that can scale up if traffic demands it.&lt;/p&gt;

&lt;h2 id=&#34;blogging-platforms-i-considered&#34;&gt;Blogging Platforms I Considered&lt;/h2&gt;

&lt;h3 id=&#34;wordpress&#34;&gt;Wordpress&lt;/h3&gt;

&lt;p&gt;Just kidding.&lt;/p&gt;

&lt;h3 id=&#34;grav-cms&#34;&gt;Grav CMS&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href=&#34;https://getgrav.org/&#34;&gt;https://getgrav.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grav is a &amp;ldquo;flat file CMS&amp;rdquo; written in PHP. I downloaded the Grav system with the admin plugin
and ran it quickly using PHP&amp;rsquo;s builtin web server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;curl -fsSL &lt;span class=&#34;s2&#34;&gt;&amp;quot;https://github.com/getgrav/grav/releases/download/1.1.11/grav-admin.zip&amp;quot;&lt;/span&gt; &amp;gt; grav-admin.zip
unzip grav-admin.zip
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; grav-admin
php -S localhost:8888 system/router.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I really like Grav. The themes and the admin system look great and are very easy to use.
It runs out of the box without any initial configuration and is easy to customise with
loads of nice themes available.&lt;/p&gt;

&lt;p&gt;The system itself seems a bit bulky and complex and diving into the application further,
I found lots of nested YAML files for advanced configuration. Despite not having a database,
there seems to be a lot of moving parts, and it has a deep, complex caching layer, which is built up
at runtime.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s clear that this is a very capable system and will offer stacks of functionality, over and
above a blogging platform.&lt;/p&gt;

&lt;h3 id=&#34;hugo&#34;&gt;Hugo&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;a href=&#34;https://gohugo.io&#34;&gt;https://gohugo.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hugo is a &amp;ldquo;site generation tool&amp;rdquo; written in Go. It&amp;rsquo;s intended to be similar to Jekyll.&lt;/p&gt;

&lt;p&gt;As a site generation tool, it operates on a directory of flat files, and uses config
files to produce a rich, themed, static HTML website that can be deployed directly.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a single command to install, easy to configure and blisteringly
quick at rendering content. It comes with a built in tool for rendering and displaying
your content locally while you write. It also supports &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;themes&lt;/a&gt;,
and happily lots of the Grav themes have been ported for Hugo.&lt;/p&gt;

&lt;p&gt;Install on MacOS (for other systems just &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;download the correct release from here&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new site skeleton:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site my-new-site
cd my-new-site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Choose a theme from &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;http://themes.gohugo.io/&lt;/a&gt; and install. E.G.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/spf13/hyde.git themes/hyde
echo &#39;theme = &amp;quot;hyde&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create your first post:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the local server (and show draft posts with -D):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now view your first post by pointing your browser at &lt;code&gt;http://localhost:1313&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add some &amp;ldquo;lipsum&amp;rdquo; content to your post?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -fsSL &amp;quot;https://baconipsum.com/api/?type=meat-and-filler&amp;amp;paras=2&amp;amp;format=text&amp;quot; &amp;gt;&amp;gt; content/post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With your browser still open, you should see the content magically update
(It&amp;rsquo;s not magic, it&amp;rsquo;s websockets).&lt;/p&gt;

&lt;h2 id=&#34;next-time&#34;&gt;Next Time&lt;/h2&gt;

&lt;p&gt;Next time, we will use terraform to configure an S3 bucket to host the static site
generated from this post.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>