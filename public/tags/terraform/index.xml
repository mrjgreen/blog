<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on Joe Green</title>
    <link>http://joeg.uk/tags/terraform/index.xml</link>
    <description>Recent content in Terraform on Joe Green</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright> </copyright>
    <atom:link href="http://joeg.uk/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building a Blog - Part 2</title>
      <link>http://joeg.uk/2016/12/building-a-blog---part-2/</link>
      <pubDate>Fri, 23 Dec 2016 00:02:31 +0000</pubDate>
      
      <guid>http://joeg.uk/2016/12/building-a-blog---part-2/</guid>
      <description>

&lt;p&gt;Last time, we discussed setting up a blog using &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, a static site generator.&lt;/p&gt;

&lt;p&gt;Today, I&amp;rsquo;m going to add to the project with some terraform configuration and a simple
build and deploy process.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR - I added terraform files in the &amp;ldquo;resources&amp;rdquo; folder to create an S3 bucket
and a Makefile with a few canned commands for deploying.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you don&amp;rsquo;t already have them, you&amp;rsquo;ll need the following tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;awscli (&lt;code&gt;brew install awscli&lt;/code&gt; or &lt;code&gt;pip install awscli&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;terraform (&lt;code&gt;brew install terraform&lt;/code&gt; or &lt;a href=&#34;https://www.terraform.io/downloads.html&#34;&gt;download for your platform&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;rsquo;ll need to configure your credentials for the awscli by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws configure
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-the-s3-bucket&#34;&gt;Creating the S3 Bucket&lt;/h2&gt;

&lt;p&gt;We could very quickly jump onto our AWS console and create an S3 bucket. A few clicks in the
interface and in seconds we could be up and running.&lt;/p&gt;

&lt;p&gt;Well, that&amp;rsquo;s fine for now, but what if we want to add cloudfront capabilities? Or some DNS
records to route 53? Even with a simple static website, its easy to see how our infrastructure
could expand.&lt;/p&gt;

&lt;p&gt;Using terraform we can store a representation of our infrastructure in code, which will be
used to drive the API commands to build your stack.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by creating a folder to hold our terraform files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir resources/terraform
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create a file &lt;code&gt;resources/terraform/s3.tf&lt;/code&gt; to hold our S3 Bucket configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resource &amp;quot;aws_s3_bucket&amp;quot; &amp;quot;blog&amp;quot; {
  bucket = &amp;quot;joeg.uk&amp;quot;
  acl = &amp;quot;public-read&amp;quot; # Needs to be public for a website

  versioning {
    enabled = true
  }
  
  website {
      index_document = &amp;quot;index.html&amp;quot;
      error_document = &amp;quot;404.html&amp;quot;
  }

  tags {
    Application = &amp;quot;Blog&amp;quot;
    Owner = &amp;quot;Joe Green&amp;quot;
    Provisioner = &amp;quot;Terraform&amp;quot;
    ProvisionerSrc = &amp;quot;github.com/mrjgreen/blog&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; It&amp;rsquo;s important to tag all your resources appropriately to help with identification
and cost breakdowns (E.G. see how much each &amp;ldquo;Application&amp;rdquo; is costing to run).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;applying-your-infrastructure&#34;&gt;Applying your Infrastructure&lt;/h3&gt;

&lt;p&gt;You should now be able to navigate to your terraform directory and run a &amp;ldquo;plan&amp;rdquo;.
A plan is a dry run, and will NOT make any changes to your infrastructure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd resources/terraform
terraform plan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any resource created for AWS will use the terraform AWS provider, which requires a
default region setting. By default, terraform will ask you to provide this on
the terminal whenever you run a command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ terraform plan
provider.aws.region
  The region where AWS operations will take place. Examples
  are us-east-1, us-west-2, etc.

  Default: us-east-1
  Enter a value: eu-west-1
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to avoid typing this each time and to ensure all our configuration is held
in our terraform files, we can create a new file &lt;code&gt;resources/terraform/aws.tf&lt;/code&gt; containing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;provider &amp;quot;aws&amp;quot; {
  region = &amp;quot;eu-west-1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run &lt;code&gt;terraform plan&lt;/code&gt; we will not be prompted for a value, and we should see
our new infrastructure component ready to create.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ terraform plan
Refreshing Terraform state in-memory prior to plan...

// snip...

+ aws_s3_bucket.blog
    acceleration_status:      &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    acl:                      &amp;quot;public-read&amp;quot;
    arn:                      &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    bucket:                   &amp;quot;joeg.uk&amp;quot;
    force_destroy:            &amp;quot;false&amp;quot;
    hosted_zone_id:           &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    region:                   &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    request_payer:            &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    tags.%:                   &amp;quot;4&amp;quot;
    tags.Application:         &amp;quot;Blog&amp;quot;
    tags.Owner:               &amp;quot;Joe Green&amp;quot;
    tags.Provisioner:         &amp;quot;Terraform&amp;quot;
    tags.ProvisionerSrc:      &amp;quot;github.com/mrjgreen/blog&amp;quot;
    versioning.#:             &amp;quot;1&amp;quot;
    versioning.0.enabled:     &amp;quot;true&amp;quot;
    versioning.0.mfa_delete:  &amp;quot;false&amp;quot;
    website.#:                &amp;quot;1&amp;quot;
    website.0.error_document: &amp;quot;404.html&amp;quot;
    website.0.index_document: &amp;quot;index.html&amp;quot;
    website_domain:           &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;
    website_endpoint:         &amp;quot;&amp;lt;computed&amp;gt;&amp;quot;


Plan: 1 to add, 0 to change, 0 to destroy.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets go ahead and apply that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see pretty much the same output as before, but with the last line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deploying-the-blog&#34;&gt;Deploying the Blog&lt;/h2&gt;

&lt;p&gt;Running &lt;code&gt;hugo&lt;/code&gt; will generate your static site in a folder called &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Deploying should be as easy as copying the contents of &lt;code&gt;public&lt;/code&gt; up to the S3 bucket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws s3 sync public s3://joeg.uk --delete --acl public-read
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can store this in a &lt;code&gt;Makefile&lt;/code&gt; in the project root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;all:

build:
	rm -fr public/*
	hugo

deploy:
	aws s3 sync public s3://joeg.uk --delete --acl public-read
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will allow us to run simple commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make deploy
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>